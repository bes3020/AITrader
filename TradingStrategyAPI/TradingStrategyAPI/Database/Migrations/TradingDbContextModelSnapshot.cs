// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingStrategyAPI.Database;

#nullable disable

namespace TradingStrategyAPI.Database.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    partial class TradingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradingStrategyAPI.Models.Bar", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("symbol");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<long>("AvgVolume20")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_volume_20");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("close");

                    b.Property<decimal>("Ema20")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ema20");

                    b.Property<decimal>("Ema50")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ema50");

                    b.Property<decimal>("Ema9")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ema9");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("high");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("low");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("open");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.Property<decimal>("Vwap")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vwap");

                    b.HasKey("Symbol", "Timestamp")
                        .HasName("pk_futures_bars");

                    b.HasIndex("Symbol")
                        .HasDatabaseName("ix_bars_symbol");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_bars_timestamp");

                    b.HasIndex("Symbol", "Timestamp")
                        .HasDatabaseName("ix_bars_symbol_timestamp");

                    b.HasIndex("Symbol", "Timestamp", "Volume")
                        .HasDatabaseName("ix_bars_symbol_timestamp_volume");

                    b.ToTable("futures_bars", (string)null);
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("indicator");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("operator");

                    b.Property<int>("StrategyId")
                        .HasColumnType("integer")
                        .HasColumnName("strategy_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Indicator")
                        .HasDatabaseName("ix_conditions_indicator");

                    b.HasIndex("StrategyId")
                        .HasDatabaseName("ix_conditions_strategy_id");

                    b.ToTable("conditions");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.StopLoss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("StrategyId")
                        .HasColumnType("integer")
                        .HasColumnName("strategy_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId")
                        .IsUnique()
                        .HasDatabaseName("ix_stop_losses_strategy_id");

                    b.ToTable("stop_losses");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.Strategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("direction");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("MaxPositions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("max_positions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("PositionSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("position_size");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("symbol");

                    b.Property<string>("Timeframe")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("timeframe");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_strategies_created_at");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_strategies_is_active");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_strategies_user_id");

                    b.ToTable("strategies");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.StrategyError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Context")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("ErrorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FailedExpression")
                        .HasColumnType("text");

                    b.Property<bool>("IsResolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<int?>("StrategyId")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestedFix")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ErrorType")
                        .HasDatabaseName("ix_strategy_errors_error_type");

                    b.HasIndex("IsResolved")
                        .HasDatabaseName("ix_strategy_errors_is_resolved");

                    b.HasIndex("StrategyId")
                        .HasDatabaseName("ix_strategy_errors_strategy_id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_strategy_errors_timestamp");

                    b.HasIndex("ErrorType", "Timestamp")
                        .HasDatabaseName("ix_strategy_errors_error_type_timestamp");

                    b.ToTable("StrategyErrors");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.StrategyResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AvgLoss")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("avg_loss");

                    b.Property<decimal>("AvgWin")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("avg_win");

                    b.Property<DateTime>("BacktestEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("backtest_end");

                    b.Property<DateTime>("BacktestStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("backtest_start");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Insights")
                        .HasColumnType("text")
                        .HasColumnName("insights");

                    b.Property<decimal>("MaxDrawdown")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_drawdown");

                    b.Property<decimal?>("ProfitFactor")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("profit_factor");

                    b.Property<decimal?>("SharpeRatio")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("sharpe_ratio");

                    b.Property<int>("StrategyId")
                        .HasColumnType("integer")
                        .HasColumnName("strategy_id");

                    b.Property<decimal>("TotalPnl")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_pnl");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("integer")
                        .HasColumnName("total_trades");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("decimal(5,4)")
                        .HasColumnName("win_rate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_strategy_results_created_at");

                    b.HasIndex("StrategyId")
                        .HasDatabaseName("ix_strategy_results_strategy_id");

                    b.HasIndex("StrategyId", "CreatedAt")
                        .HasDatabaseName("ix_strategy_results_strategy_id_created_at");

                    b.ToTable("strategy_results");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.TakeProfit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("StrategyId")
                        .HasColumnType("integer")
                        .HasColumnName("strategy_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId")
                        .IsUnique()
                        .HasDatabaseName("ix_take_profits_strategy_id");

                    b.ToTable("take_profits");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.TradeAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AdxValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("adx_value");

                    b.Property<decimal?>("AtrValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("atr_value");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("day_of_week");

                    b.Property<string>("EntryReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entry_reason");

                    b.Property<string>("ExitReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exit_reason");

                    b.Property<string>("LessonsLearned")
                        .HasColumnType("text")
                        .HasColumnName("lessons_learned");

                    b.Property<string>("MarketCondition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("market_condition");

                    b.Property<string>("Narrative")
                        .HasColumnType("text")
                        .HasColumnName("narrative");

                    b.Property<string>("TimeOfDay")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("time_of_day");

                    b.Property<int>("TradeResultId")
                        .HasColumnType("integer")
                        .HasColumnName("trade_result_id");

                    b.Property<decimal?>("VixLevel")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("vix_level");

                    b.Property<string>("WhatWentRight")
                        .HasColumnType("text")
                        .HasColumnName("what_went_right");

                    b.Property<string>("WhatWentWrong")
                        .HasColumnType("text")
                        .HasColumnName("what_went_wrong");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeek")
                        .HasDatabaseName("ix_trade_analyses_day_of_week");

                    b.HasIndex("MarketCondition")
                        .HasDatabaseName("ix_trade_analyses_market_condition");

                    b.HasIndex("TimeOfDay")
                        .HasDatabaseName("ix_trade_analyses_time_of_day");

                    b.HasIndex("TradeResultId")
                        .IsUnique()
                        .HasDatabaseName("ix_trade_analyses_trade_result_id");

                    b.HasIndex("MarketCondition", "TimeOfDay")
                        .HasDatabaseName("ix_trade_analyses_condition_time");

                    b.ToTable("trade_analyses");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.TradeResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BarsHeld")
                        .HasColumnType("integer")
                        .HasColumnName("bars_held");

                    b.Property<DateTime?>("ChartDataEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("chart_data_end");

                    b.Property<DateTime?>("ChartDataStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("chart_data_start");

                    b.Property<int?>("EntryBarIndex")
                        .HasColumnType("integer")
                        .HasColumnName("entry_bar_index");

                    b.Property<decimal>("EntryPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("entry_price");

                    b.Property<int?>("EntryQualityScore")
                        .HasColumnType("integer")
                        .HasColumnName("entry_quality_score");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_time");

                    b.Property<int?>("ExitBarIndex")
                        .HasColumnType("integer")
                        .HasColumnName("exit_bar_index");

                    b.Property<decimal?>("ExitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("exit_price");

                    b.Property<int?>("ExitQualityScore")
                        .HasColumnType("integer")
                        .HasColumnName("exit_quality_score");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exit_time");

                    b.Property<string>("IndicatorValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("indicator_values");

                    b.Property<decimal>("MaxAdverseExcursion")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_adverse_excursion");

                    b.Property<decimal>("MaxFavorableExcursion")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_favorable_excursion");

                    b.Property<decimal>("Pnl")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("pnl");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("result");

                    b.Property<decimal?>("RiskRewardRatio")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("risk_reward_ratio");

                    b.Property<string>("SetupBars")
                        .HasColumnType("jsonb")
                        .HasColumnName("setup_bars");

                    b.Property<int>("StrategyResultId")
                        .HasColumnType("integer")
                        .HasColumnName("strategy_result_id");

                    b.Property<string>("TradeBars")
                        .HasColumnType("jsonb")
                        .HasColumnName("trade_bars");

                    b.Property<string>("TradeNotes")
                        .HasColumnType("text")
                        .HasColumnName("trade_notes");

                    b.HasKey("Id");

                    b.HasIndex("EntryTime")
                        .HasDatabaseName("ix_trade_results_entry_time");

                    b.HasIndex("Result")
                        .HasDatabaseName("ix_trade_results_result");

                    b.HasIndex("StrategyResultId")
                        .HasDatabaseName("ix_trade_results_strategy_result_id");

                    b.HasIndex("StrategyResultId", "Result", "Pnl")
                        .HasDatabaseName("ix_trade_results_strategy_result_id_result_pnl");

                    b.ToTable("trade_results");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.Condition", b =>
                {
                    b.HasOne("TradingStrategyAPI.Models.Strategy", "Strategy")
                        .WithMany("EntryConditions")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.StopLoss", b =>
                {
                    b.HasOne("TradingStrategyAPI.Models.Strategy", "Strategy")
                        .WithOne("StopLoss")
                        .HasForeignKey("TradingStrategyAPI.Models.StopLoss", "StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.Strategy", b =>
                {
                    b.HasOne("TradingStrategyAPI.Models.User", "User")
                        .WithMany("Strategies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.StrategyError", b =>
                {
                    b.HasOne("TradingStrategyAPI.Models.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.StrategyResult", b =>
                {
                    b.HasOne("TradingStrategyAPI.Models.Strategy", "Strategy")
                        .WithMany("Results")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.TakeProfit", b =>
                {
                    b.HasOne("TradingStrategyAPI.Models.Strategy", "Strategy")
                        .WithOne("TakeProfit")
                        .HasForeignKey("TradingStrategyAPI.Models.TakeProfit", "StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.TradeAnalysis", b =>
                {
                    b.HasOne("TradingStrategyAPI.Models.TradeResult", "TradeResult")
                        .WithOne("Analysis")
                        .HasForeignKey("TradingStrategyAPI.Models.TradeAnalysis", "TradeResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeResult");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.TradeResult", b =>
                {
                    b.HasOne("TradingStrategyAPI.Models.StrategyResult", "StrategyResult")
                        .WithMany("AllTrades")
                        .HasForeignKey("StrategyResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrategyResult");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.Strategy", b =>
                {
                    b.Navigation("EntryConditions");

                    b.Navigation("Results");

                    b.Navigation("StopLoss");

                    b.Navigation("TakeProfit");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.StrategyResult", b =>
                {
                    b.Navigation("AllTrades");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.TradeResult", b =>
                {
                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("TradingStrategyAPI.Models.User", b =>
                {
                    b.Navigation("Strategies");
                });
#pragma warning restore 612, 618
        }
    }
}
